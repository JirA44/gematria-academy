#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script pour ajouter la prononciation phon√©tique √† tous les hi√©roglyphes
pour permettre la LECTURE NATURELLE de l'√©gyptien ancien
"""

import json

# Charger le JSON
with open('inscriptions-temples.json', 'r', encoding='utf-8') as f:
    data = json.load(f)

# Dictionnaire de prononciation pour les translitt√©rations courantes
PRONONCIATION = {
    # Consonnes √©gyptiennes
    'n·πØr': 'N√â-tcher',
    'pr': 'p√®r',
    'nfr': 'n√©-fer',
    'ny-swt-bity': 'ni-sout-bi-ti',
    'tut-ankh': 'tout-√¢nkh',
    'Imn': 'i-men',
    'Amon': 'a-mon',
    'Ra': 'r√¢',
    'R√™': 'r√™',
    'n·πØrw': 'n√©-tcherou',
    'Íú•n·∏´': '√¢nkh',
    '·∏èd': 'djed',
    'wÍú£s': 'ou√¢s',
    '·∏•tp': 'h√©-tep',
    '·∏•tpw': 'h√©-t√©pou',
    'di': 'di',
    'd·ªâ': 'di',
    'Íú•Íú£': '√¢',
    'nswt': 'ni-sout',
    'nsw': 'ni-sou',
    'n': 'en',
    'm': 'em',
    'Íú£·∏•t': 'a-khet',
    'hrw': 'h√©rou',
    'prt': 'p√©-ret',
    'ink': 'inek',
    'Sn·∏•': 'si-nou-h√©',
    '·∏•kÍú£w': 'h√©-kaou',
    'Ppy': 'p√©-pi',
    'pn': 'pen',
    '·ªât': 'it',
    '·∏§r': 'hor',
    'pt': 'p√®t',
    'w·∏èt': 'ou-djet',
    'Trygwtr·∫És': 'tri-gou-tros',
    '·∏èw': 'dou',
    '·∏≥Íú£b': 'k√¢b',
    'Íú•·∏•Íú•': 'a-ha',
    '·∏™wfw': 'khou-fou',
    'Wsir': 'ou-sir',
    'Wsjr': 'ou-sir',
    'St·∫ñ': 'seth',
    'St≈°': 'setesh',
    '·∏èd-pjlr': 'djed pi-l√®r',
    'wÍú£s-s·∏´m': 'ou√¢s s√©khem',
    '·ªâmÍú£·∏´': 'i-makh',
    '·∏´r': 'kher',
    'mÍú£Íú•-·∏´rw': 'm√¢-kherou',
    'sÍú£': 'sa',
    'mwt': 'mout',
    'nb': 'neb',
    'tÍú£wy': 'ta-oui',
    '·∏•m': 'hem',
    'n·πØr-nfr': 'n√©-tcher n√©-fer',
    'r·∏èi': 're-di',
    '·∏èt': 'djet',
    'n·∏•·∏•': 'n√©-heh',
    's·∏èm': 's√©-djem',
    'md': 'med',
    'mdw': 'm√©-dou',
    'n·πØrw': 'n√©-tcherou',
    'sÍú•n·∏´': 's√©-√¢nkh',
    'r·∏´': 'rekh',
    't': 'et',
    'Ptol√©m√©e': 'pto-l√©-m√©',
    # Syllabes simples
    'a': 'a',
    'i': 'i',
    'w': 'ou',
    'b': 'eb',
    'p': 'ep',
    'f': 'ef',
    'm': 'em',
    'n': 'en',
    'r': 'er',
    'h': 'eh',
    's': 'es',
    '≈°': 'esh',
    'k': 'ek',
    'g': 'eg',
    't': 'et',
    'd': 'd',
    '·∏è': 'dj',
}

def generer_prononciation(transliteration, traduction):
    """
    G√©n√®re une prononciation phon√©tique √† partir de la translitt√©ration
    """
    # Chercher correspondance exacte
    if transliteration in PRONONCIATION:
        return PRONONCIATION[transliteration]

    # Chercher dans les traductions connues
    if traduction in PRONONCIATION:
        return PRONONCIATION[traduction]

    # G√©n√©rer prononciation approximative
    prononciation = transliteration

    # Remplacer caract√®res sp√©ciaux
    remplacements = {
        '·πØ': 'tch',
        '·∏´': 'kh',
        '·∏•': 'h',
        '·∏≥': 'k',
        'Íú•': 'a',
        'Íú£': '√¢',
        '≈°': 'sh',
        '·∏è': 'dj',
        'w': 'ou',
    }

    for ancien, nouveau in remplacements.items():
        prononciation = prononciation.replace(ancien, nouveau)

    return prononciation

# Parcourir tous les niveaux
compteur = 0
for niveau in ['debutant', 'intermediaire', 'expert']:
    for inscription in data['hieroglyphes'][niveau]:
        for mot in inscription['mots']:
            if 'pronunciation' not in mot:
                # G√©n√©rer prononciation
                transliteration = mot.get('transliteration', '')
                traduction = mot.get('traduction', '')

                prononciation = generer_prononciation(transliteration, traduction)
                mot['pronunciation'] = prononciation
                compteur += 1

print(f"‚úÖ {compteur} prononciations ajout√©es !")

# Sauvegarder
with open('inscriptions-temples.json', 'w', encoding='utf-8') as f:
    json.dump(data, f, ensure_ascii=False, indent=2)

print("üíæ Fichier sauvegard√© avec prononciation !")

# Afficher exemples
print("\nüìö Exemples de prononciation ajout√©s:")
for niveau in ['debutant', 'intermediaire', 'expert']:
    premier = data['hieroglyphes'][niveau][0]
    print(f"\n  {niveau.upper()} - {premier['titre']}:")
    for mot in premier['mots'][:3]:  # Premiers 3 mots
        print(f"    {mot['hieroglyph']} ‚Üí {mot.get('transliteration', '')} ‚Üí üó£Ô∏è {mot.get('pronunciation', '')}")
